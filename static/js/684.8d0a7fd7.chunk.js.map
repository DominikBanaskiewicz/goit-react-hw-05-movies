{"version":3,"file":"static/js/684.8d0a7fd7.chunk.js","mappings":"kPAEaA,EAAgB,mCAAG,WAAMC,GAAN,uFACPC,EAAAA,EAAAA,IAAA,4CAErB,CACEC,OAAQ,MACRC,OAAQ,CACNC,QAAS,mCACTC,SAAU,QACVC,MAAON,EACPO,KAAM,KATkB,cACxBC,EADwB,yBAavBA,GAbuB,2CAAH,sD,iBCEhBC,EAAe,WAC1B,OAAkCC,EAAAA,EAAAA,WAAS,GAA3C,eAAOC,EAAP,KAAkBC,EAAlB,KACA,GAAwBF,EAAAA,EAAAA,UAAS,IAAjC,eAAOG,EAAP,KAAaC,EAAb,KACA,GAA0BJ,EAAAA,EAAAA,UAAS,IAAnC,eAAOJ,EAAP,KAAcS,EAAd,KA6BA,OAnBAC,EAAAA,EAAAA,YAAU,WACRJ,GAAa,GACbE,EAAQ,IACR,IAAMG,EAAiB,mCAAG,WAAMC,GAAN,gGAEDnB,EAAiBmB,GAFhB,OAGa,KAD7BC,EAFgB,QAGXN,KAAKO,QAAQC,QAAcP,EAAQK,EAAON,KAAKO,SAHpC,sEAMtBR,GAAa,GANS,0EAAH,sDASvBK,EAAkBX,EACnB,GAAE,CAACA,KAEJU,EAAAA,EAAAA,YAAU,WACRF,EAAQ,GACT,GAAE,KAGD,0BACE,kBAAMQ,SA7BW,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cAEfX,EAASU,EAAKE,SAAST,YAAYU,OACnCH,EAAKI,OACN,EAuBG,WACE,8BACE,kBAAOC,KAAK,cAAcC,KAAK,UAC/B,2CAGF,yBACIpB,GAA6B,IAAhBE,EAAKQ,QAOlB,qDANAR,EAAKmB,KAAI,SAAAC,GAAI,OACX,yBACE,SAAC,KAAD,CAAMC,GAAE,UAAKD,EAAKE,IAAlB,SAAyBF,EAAKG,SADvBH,EAAKE,GADH,UAYxB,C","sources":["components/Api/getMoviesByQuery.js","components/SearchMovies/SearchMovies.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nexport const getMoviesByQuery = async SearchQuery => {\r\n  const response = await axios.get(\r\n    `https://api.themoviedb.org/3/search/movie`,\r\n    {\r\n      method: 'get',\r\n      params: {\r\n        api_key: '63b14a4f04fca1cccc4d7c2b70917b7d',\r\n        language: 'en-US',\r\n        query: SearchQuery,\r\n        page: 1,\r\n      },\r\n    }\r\n  );\r\n  return response;\r\n};\r\n","import { useState, useEffect } from 'react';\r\nimport { getMoviesByQuery } from 'components/Api/getMoviesByQuery';\r\nimport { Link } from 'react-router-dom';\r\n\r\nexport const SearchMovies = () => {\r\n  const [isLoading, setIsLoading] = useState(true);\r\n  const [data, setData] = useState([]);\r\n  const [query, setQuery] = useState([]);\r\n\r\n  const handleSubmit = e => {\r\n    e.preventDefault();\r\n    const form = e.currentTarget;\r\n\r\n    setQuery(form.elements.searchQuery.value);\r\n    form.reset();\r\n  };\r\n\r\n  useEffect(() => {\r\n    setIsLoading(true);\r\n    setData([]);\r\n    const getMoviesByQuery2 = async searchQuery => {\r\n      try {\r\n        const movies = await getMoviesByQuery(searchQuery);\r\n        if (movies.data.results.length !== 0) setData(movies.data.results);\r\n      } catch (error) {\r\n      } finally {\r\n        setIsLoading(false);\r\n      }\r\n    };\r\n    getMoviesByQuery2(query);\r\n  }, [query]);\r\n\r\n  useEffect(() => {\r\n    setData([]);\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <form onSubmit={handleSubmit}>\r\n        <label>\r\n          <input name=\"searchQuery\" type=\"text\" />\r\n          <button>Search</button>\r\n        </label>\r\n\r\n        <div>\r\n          {!isLoading && data.length !== 0 ? (\r\n            data.map(elem => (\r\n              <li key={elem.id}>\r\n                <Link to={`${elem.id}`}>{elem.title}</Link>\r\n              </li>\r\n            ))\r\n          ) : (\r\n            <p>Sorry, check search query</p>\r\n          )}\r\n        </div>\r\n      </form>\r\n    </div>\r\n  );\r\n};\r\n"],"names":["getMoviesByQuery","SearchQuery","axios","method","params","api_key","language","query","page","response","SearchMovies","useState","isLoading","setIsLoading","data","setData","setQuery","useEffect","getMoviesByQuery2","searchQuery","movies","results","length","onSubmit","e","preventDefault","form","currentTarget","elements","value","reset","name","type","map","elem","to","id","title"],"sourceRoot":""}